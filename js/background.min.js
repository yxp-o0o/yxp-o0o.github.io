
(function() {
    console.log('Background effect initialized');
    const canvas = document.getElementById('background');
    if (!canvas) {
        console.error('Canvas element not found');
        return;
    }
    const ctx = canvas.getContext('2d');
    if (!ctx) {
        console.error('Could not get 2D context');
        return;
    }
    let width = window.innerWidth;
    let height = window.innerHeight;
    const particles = [];
    const particleCount = 100;

    function Particle() {
        this.x = Math.random() * width;
        this.y = Math.random() * height;
        this.vx = (Math.random() - 0.5) * 0.5; // 减小水平速度
        this.vy = Math.random() * 1 + 1; // 增加垂直下落速度
        this.radius = Math.random() * 4 + 2; // 增大粒子大小
        this.color = `hsla(${Math.random() * 20 + 340}, 70%, 70%, ${Math.random() * 0.5 + 0.3})`; // 调整为粉色系
        this.tailLength = Math.floor(Math.random() * 10) + 5;
        this.tail = [];
        this.rotation = Math.random() * 360; // 添加旋转角度
        this.rotationSpeed = (Math.random() - 0.5) * 0.1; // 添加旋转速度
    }

    Particle.prototype.update = function() {
        // 添加尾部效果
        this.tail.unshift({x: this.x, y: this.y});
        if (this.tail.length > this.tailLength) {
            this.tail.pop();
        }

        this.x += this.vx;
        this.y += this.vy;
        this.rotation += this.rotationSpeed;

        // 重置位置
        if (this.y > height) {
            this.y = -10;
            this.x = Math.random() * width;
        }
    };

    Particle.prototype.draw = function() {
        // 绘制樱花花瓣
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.rotation * Math.PI / 180);
        
        // 绘制花瓣形状
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.bezierCurveTo(-this.radius, -this.radius * 0.8, -this.radius * 0.8, -this.radius, 0, -this.radius);
        ctx.bezierCurveTo(this.radius * 0.8, -this.radius, this.radius, -this.radius * 0.8, this.radius, 0);
        ctx.bezierCurveTo(this.radius, this.radius * 0.8, this.radius * 0.8, this.radius, 0, this.radius);
        ctx.bezierCurveTo(-this.radius * 0.8, this.radius, -this.radius, this.radius * 0.8, -this.radius, 0);
        ctx.closePath();
        
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.restore();
    };

    function init() {
        canvas.width = width;
        canvas.height = height;
        for (let i = 0; i < particleCount; i++) {
            particles.push(new Particle());
        }
    }

    function animate() {
        // 将背景改为白色
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, width, height);

        particles.forEach(particle => {
            particle.update();
            particle.draw();
        });
        requestAnimationFrame(animate);
    }

    window.addEventListener('resize', () => {
        width = window.innerWidth;
        height = window.innerHeight;
        canvas.width = width;
        canvas.height = height;
    });

    init();
    animate();
})();